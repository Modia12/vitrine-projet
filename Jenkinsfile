pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'spray-info'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        NODE_VERSION = '20'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì¶ R√©cup√©ration du code source...'
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            agent {
                docker {
                    image 'node:20-alpine'
                    reuseNode true
                }
            }
            steps {
                echo 'üì• Installation des d√©pendances...'
                sh 'npm ci --prefer-offline --no-audit'
            }
        }
        
        stage('Lint') {
            agent {
                docker {
                    image 'node:20-alpine'
                    reuseNode true
                }
            }
            steps {
                echo 'üîç V√©rification du code...'
                sh 'npm run lint || echo "‚ö†Ô∏è Lint warnings trouv√©s"'
            }
        }
        
        stage('Build Application') {
            agent {
                docker {
                    image 'node:20-alpine'
                    reuseNode true
                }
            }
            steps {
                echo 'üèóÔ∏è Construction de l\'application...'
                sh 'npm run build'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Construction de l\'image Docker...'
                script {
                    sh """
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                echo 'üß™ Test de l\'image Docker...'
                script {
                    sh """
                        # Arr√™ter et supprimer le conteneur s'il existe
                        docker stop test-spray-info || true
                        docker rm test-spray-info || true
                        
                        # D√©marrer le conteneur de test
                        docker run -d --name test-spray-info -p 3001:3000 ${DOCKER_IMAGE}:${DOCKER_TAG}
                        
                        # Attendre que l'application d√©marre
                        echo "‚è≥ Attente du d√©marrage de l'application..."
                        sleep 10
                        
                        # V√©rifier les logs
                        docker logs test-spray-info
                        
                        # Tester l'application
                        curl -f http://localhost:3001 || (docker logs test-spray-info && exit 1)
                        
                        echo "‚úÖ Test r√©ussi!"
                        
                        # Nettoyer
                        docker stop test-spray-info
                        docker rm test-spray-info
                    """
                }
            }
        }
        
        stage('Deploy') {
            steps {
                echo 'üöÄ D√©ploiement...'
                script {
                    sh """
                        echo "D√©ploiement de l'image ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        
                        # Arr√™ter l'ancien conteneur
                        docker stop spray-info-app || true
                        docker rm spray-info-app || true
                        
                        # D√©marrer le nouveau conteneur
                        docker run -d \
                            --name spray-info-app \
                            -p 3000:3000 \
                            --restart unless-stopped \
                            ${DOCKER_IMAGE}:${DOCKER_TAG}
                        
                        echo "‚úÖ Application d√©ploy√©e sur http://localhost:3000"
                    """
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Nettoyage...'
            sh '''
                # Nettoyer les conteneurs de test
                docker stop test-spray-info || true
                docker rm test-spray-info || true
                
                # Nettoyer les images non utilis√©es
                docker image prune -f || true
            '''
        }
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s!'
        }
        failure {
            echo '‚ùå Le pipeline a √©chou√©!'
            sh '''
                # Afficher les logs en cas d'√©chec
                docker logs test-spray-info || true
                docker logs spray-info-app || true
            '''
        }
    }
}
